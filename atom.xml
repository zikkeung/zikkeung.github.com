<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Zikkeung's blog]]></title>
  <link href="http://zikkeung.github.com/atom.xml" rel="self"/>
  <link href="http://zikkeung.github.com"/>
  <updated>2013-10-11T10:08:30.000Z</updated>
  <id>http://zikkeung.github.com/</id>
  <author>
    <name><![CDATA[zikkeung]]></name>
    <email><![CDATA[zikkeunglam@gmail.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[hexo 适合前端 geek 的博客]]></title>
    <link href="http://zikkeung.github.com/hexo适合前端geek的博客/"/>
    <id>http://zikkeung.github.com/hexo适合前端geek的博客/</id>
    <published>2013-10-12T11:35:21.000Z</published>
    <updated>2013-10-11T10:08:17.000Z</updated>
    <content type="html"><![CDATA[<p>hexo 是一个基于 Node.js 的静态博客程序，编译上百篇文字只需要几秒，和Octopress项目，速度占有很大的优势。hexo 只需要将生成静态网页放到服务器上就可以了，所以可以将博客托管在github、hreoku、bae等平台上。</p>
<ul>
<li>项目地址 <a href="https://github.com/tommy351/hexo" target="_blank">https://github.com/tommy351/hexo</a></li>
<li>官网 <a href="http://zespia.tw/hexo" target="_blank">http://zespia.tw/hexo</a></li>
<li>作者 <a href="https://twitter.com/tommy351" target="_blank">https://twitter.com/tommy351</a></li>
</ul>
<h2>安装</h2>
<p>首先需要安装<a href="http://nodejs.org/" title="nodejs 官网" target="_blank">nodejs</a>和<a href="http://npm.org/" title="npm 官网" target="_blank">npm</a>包管理。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install -g hexo
</pre></td></tr></table></figure>

<p><a id="more"></a></p>
<h2>更新</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install -g hexo
</pre></td></tr></table></figure>

<h2>初始化博客</h2>
<p>进入到指定的目录然后执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo init <span class="tag">&lt;<span class="title">folder</span>&gt;</span>
</pre></td></tr></table></figure>

<h2>新建文章</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo <span class="keyword">new</span> <span class="attribute">'title</span>'
</pre></td></tr></table></figure>

<p>在/source/_post/就可以找到相应的文件了,文章是使用［markdown］（<a href="http://wowubuntu.com/markdown/）语法编写的" target="_blank">http://wowubuntu.com/markdown/）语法编写的</a></p>
<h2>使用插件</h2>
<p>hexo提供了一些<a href="https://github.com/tommy351/hexo/wiki/Plugins" target="_blank">插件</a>给大家选择使用，通过插件，例如可以实现rss订阅功能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm install <span class="tag">&lt;<span class="title">plugin-name</span>&gt;</span> --save
</pre></td></tr></table></figure>

<p>如何在_config.yml文件加上</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>plugins:
- hexo-generator-feed  <span class="comment">//插件名</span>
</pre></td></tr></table></figure>

<p>插件可以在<a href="https://github.com/tommy351/hexo/wiki/Plugins" target="_blank">这里</a>找到</p>
<h2>评论</h2>
<p>静态博客的评论是要使用第三方评论，DISQUS 比较有名的社会化评论，国内有多说。</p>
<p>使用DISQUS很简单，只需要去DISQUS注册一个账号，然后修改_config.yml文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">disqus_shortname</span>: <span class="string">disqus_id</span>
</pre></td></tr></table></figure>

<p>如果要用多说，将多说提供的代码覆盖掉<figure class="highlight lang-/themes/light/layout/_partial/comment.ejs```"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>

<span class="vala"><span class="preprocessor">## 生成静态文件</span></span>
</pre></td></tr></table></figure></p>
<p>hexo generate</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>执行 generate 命令后，会在 <span class="keyword">public</span> 文件夹生成静态博客文件，讲此文件夹传上去服务器环境即可

<span class="preprocessor">## 预览博客</span>
</pre></td></tr></table></figure>

<p>hexo server</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>
<span class="preprocessor">## 发布博客</span>

部署到 Github 需要配置_config.yml文件。
</pre></td></tr></table></figure>

<p>deploy:<br>  type: github<br>  repository: git@github.com:zikkeung/zikkeung.github.com.git<br>  branch: master</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>
发布命令
</pre></td></tr></table></figure>

<p>hexo deploy<br>```</p>
<p>经过上面的步骤，你的博客就初步弄好了，尽情的写博客吧</p>
]]></content>
    <category scheme="http://zikkeung.github.com/tags/hexo/" term="hexo"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[grunt入门]]></title>
    <link href="http://zikkeung.github.com/grunt入门/"/>
    <id>http://zikkeung.github.com/grunt入门/</id>
    <published>2013-10-11T05:35:21.000Z</published>
    <updated>2013-10-11T08:34:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://farm4.staticflickr.com/3696/10202053713_38f3bbb50a_t.jpg" alt="grount icon"></p>
<h2>安装 CLI</h2>
<p>首先需要安装<a href="http://nodejs.org/" title="nodejs 官网" target="_blank">nodejs</a>和<a href="http://npm.org/" title="npm 官网" target="_blank">npm</a>包管理。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install -g grunt-cli
</pre></td></tr></table></figure>

<p>注意，安装 grunt-cli 并不等于安装了grunt！grunt CLI的任务很简单：调用与Gruntfile在同一目录中grunt。这样带来的好处是，允许你在同一个系统上同时安装多个版本的grunt</p>
<p>如果是安装了grunt 0.3之前的版本，请先卸载 grunt 再安装 grunt-cli</p>
<a id="more"></a>


<h2>开发前准备</h2>
<p>在项目文件夹中添加两份文件：package.json 和 Gruntfile</p>
<p><strong>package.json</strong>: 此文件被npm用于存储项目的元数据，以便将此项目发布为npm模块。你可以在此文件中列出项目依赖的grunt和Grunt插件，放置于devDependencies配置段内。</p>
<p><strong>Gruntfile</strong>: 此文件被命名为 <code>Gruntfile.js</code> 或 <code>Gruntfile.coffee</code>，用来配置或定义任务（task）并加载Grunt插件的。</p>
<h2>package.json</h2>
<p>创建package.json文件的方式：</p>
<ul>
<li>大部分 grunt-init 模版都会自动创建特定于项目的package.json文件。</li>
<li>npm init命令会创建一个基本的package.json文件。</li>
<li>复制下面的案例，并根据需要做扩充，参考此说明.</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>{
  <span class="string">"name"</span>: <span class="string">"my-project-name"</span>,
  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,
  <span class="string">"devDependencies"</span>: {<span class="comment">//依赖的grunt和Grunt插件</span>
    <span class="string">"grunt"</span>: <span class="string">"~0.4.1"</span>,
    <span class="string">"grunt-contrib-jshint"</span>: <span class="string">"~0.6.0"</span>,
    <span class="string">"grunt-contrib-nodeunit"</span>: <span class="string">"~0.2.0"</span>,
    <span class="string">"grunt-contrib-uglify"</span>: <span class="string">"~0.2.2"</span>
  }
}
</pre></td></tr></table></figure>

<h2>Gruntfile</h2>
<p>Gruntfile由以下几部分构成：</p>
<ul>
<li>“wrapper” 函数</li>
<li>项目与任务配置</li>
<li>加载grunt插件和任务</li>
<li>自定义任务</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="code"><pre>/<span class="regexp">/wapper 函数
module.exports = function(grunt) {

  /</span><span class="regexp">/ 项目与任务配置
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    uglify: {
      options: {
        banner: '/</span><span class="variable">*!</span> &lt;<span class="variable">%=</span> pkg.name <span class="variable">%&gt;</span> &lt;<span class="variable">%=</span> grunt.template.today(<span class="string">"yyyy-mm-dd"</span>) <span class="variable">%&gt;</span> <span class="variable">*/</span>\n<span class="string">'
      },
      build: {
        src: '</span>src/&lt;<span class="variable">%=</span> pkg.name <span class="variable">%&gt;</span>.js<span class="string">',
        dest: '</span>build/&lt;<span class="variable">%=</span> pkg.name <span class="variable">%&gt;</span>.min.js<span class="string">'
      }
    }
  });

  // 加载 "uglify" 任务的插件。
  grunt.loadNpmTasks('</span>grunt-contrib-uglify<span class="string">');
  
  // 注册 uglify 任务
  grunt.registerTask('</span>uglify<span class="string">', ['</span>uglify<span class="string">']);

  // 默认被执行的任务列表。
  grunt.registerTask('</span>default<span class="string">', ['</span>uglify<span class="string">']);

};
</pre></td></tr></table></figure>

<p>特定于项目的任务不必在Gruntfile中定义。他们可以定义在外部.js 文件中，并通过<code>grunt.loadTasks</code> 方法加载。</p>
<p>通过定义 default 任务，可以让Grunt默认执行一个或多个任务。在下面的这个案例中，执行 <code>grunt</code> 命令时如果不指定一个任务的话，将会执行uglify任务。这和执行<code>grunt uglify</code> 或者 <code>grunt default</code>的效果一样</p>
]]></content>
    <category scheme="http://zikkeung.github.com/tags/grunt/" term="grunt"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://zikkeung.github.com/hello-world/"/>
    <id>http://zikkeung.github.com/hello-world/</id>
    <published>2013-09-17T02:35:21.000Z</published>
    <updated>2013-09-17T02:35:21.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
  </entry>
</feed>
